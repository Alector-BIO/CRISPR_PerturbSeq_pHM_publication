% This is a template file for Sweave used in MAGeCK
% Author: Wei Li, Shirley Liu lab
% Do not modify lines beginning with "#__".
\documentclass{article}

\usepackage{amsmath}
\usepackage{amscd}
\usepackage[tableposition=top]{caption}
\usepackage{ifthen}
\usepackage{fullpage}
\usepackage[utf8]{inputenc}

\begin{document}
\setkeys{Gin}{width=0.9\textwidth}

\title{MAGeCK Comparison Report}
\author{Wei Li}

\maketitle


\tableofcontents

\section{Summary}

%Function definition
<<label=funcdef,include=FALSE,echo=FALSE>>=
genreporttable<-function(comparisons,ngenes,direction,fdr1,fdr5,fdr25){
  xtb=data.frame(Comparison=comparisons,Genes=ngenes,Selection=direction,FDR1=fdr1,FDR5=fdr5,FDR25=fdr25);
  colnames(xtb)=c("Comparison","Genes","Selection","FDR1%","FDR5%","FDR25%");
  return (xtb);
}
@

The statistics of comparisons is as indicated in the following table. 

<<label=tab1,echo=FALSE,results=tex>>=
library(xtable)
comparisons=c("1,3_vs_0,2 neg.","1,3_vs_0,2 pos.");
ngenes=c(207,207);
direction=c("negative","positive");
fdr1=c(2,2);
fdr5=c(2,3);
fdr25=c(3,5);

cptable=genreporttable(comparisons,ngenes,direction,fdr1,fdr5,fdr25);
print(xtable(cptable, caption = "Summary of comparisons", label = "tab:one",
    digits = c(0, 0, 0, 0, 0, 0, 0),
    table.placement = "tbp",
    caption.placement = "top"))
@

The meanings of the columns are as follows.

\begin{itemize}
\item \textbf{Comparison}: The label for comparisons;
\item \textbf{Genes}: The number of genes in the library;
\item \textbf{Selection}: The direction of selection, either positive selection or negative selection;
\item \textbf{FDR1\%}: The number of genes with FDR $<$ 1\%;
\item \textbf{FDR5\%}: The number of genes with FDR $<$ 5\%;
\item \textbf{FDR25\%}: The number of genes with FDR $<$ 25\%;
\end{itemize}

The following figures show:

\begin{itemize}
\item Individual sgRNA read counts of selected genes in selected samples; 
\item The distribution of RRA scores and p values of all genes; and
\item The RRA scores and p values of selected genes.
\end{itemize}


\newpage\section{Comparison results of 1,3 vs 0,2 neg.}

The following figure shows the distribution of RRA score in the comparison 1,3 vs 0,2 neg., and the RRA scores of 10 genes.

<<echo=FALSE>>=
gstable=read.table('TREM2_CRISPRa.gene_summary.txt',header=T)
@
%


<<fig=TRUE,echo=FALSE,width=4.5,height=4.5>>=# 
#
# parameters
# Do not modify the variables beginning with "__"

# gstablename='__GENE_SUMMARY_FILE__'
startindex=3
# outputfile='__OUTPUT_FILE__'
targetgenelist=c("CD52","FCER1G","TREM1","P2RY12","CD44","VLDLR","CD300A","TNFRSF1A","ADAM10","IL21R")
# samplelabel=sub('.\w+.\w+$','',colnames(gstable)[startindex]);
samplelabel='1,3_vs_0,2 neg.'


# You need to write some codes in front of this code:
# gstable=read.table(gstablename,header=T)
# pdf(file=outputfile,width=6,height=6)


# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")

######
# function definition

plotrankedvalues<-function(val, tglist, ...){
  
  plot(val,log='y',ylim=c(max(val),min(val)),type='l',lwd=2, ...)
  if(length(tglist)>0){
    for(i in 1:length(tglist)){
      targetgene=tglist[i];
      tx=which(names(val)==targetgene);ty=val[targetgene];
      points(tx,ty,col=colors[(i %% length(colors)) ],cex=2,pch=20)
      # text(tx+50,ty,targetgene,col=colors[i])
    }
    legend('topright',tglist,pch=20,pt.cex = 2,cex=1,col=colors)
  }
}



plotrandvalues<-function(val,targetgenelist, ...){
  # choose the one with the best distance distribution
  
  mindiffvalue=0;
  randval=val;
  for(i in 1:20){
    randval0=sample(val)
    vindex=sort(which(names(randval0) %in% targetgenelist))
    if(max(vindex)>0.9*length(val)){
      # print('pass...')
      next;
    }
    mindiffind=min(diff(vindex));
    if (mindiffind > mindiffvalue){
      mindiffvalue=mindiffind;
      randval=randval0;
      # print(paste('Diff: ',mindiffvalue))
    }
  }
  plot(randval,log='y',ylim=c(max(randval),min(randval)),pch=20,col='grey', ...)
  
  if(length(targetgenelist)>0){
    for(i in 1:length(targetgenelist)){
      targetgene=targetgenelist[i];
      tx=which(names(randval)==targetgene);ty=randval[targetgene];
      points(tx,ty,col=colors[(i %% length(colors)) ],cex=2,pch=20)
      text(tx+50,ty,targetgene,col=colors[i])
    }
  }
  
}




# set.seed(1235)



pvec=gstable[,startindex]
names(pvec)=gstable[,'id']
pvec=sort(pvec);

plotrankedvalues(pvec,targetgenelist,xlab='Genes',ylab='RRA score',main=paste('Distribution of RRA scores in \n',samplelabel))

# plotrandvalues(pvec,targetgenelist,xlab='Genes',ylab='RRA score',main=paste('Distribution of RRA scores in \n',samplelabel))


pvec=gstable[,startindex+1]
names(pvec)=gstable[,'id']
pvec=sort(pvec);

plotrankedvalues(pvec,targetgenelist,xlab='Genes',ylab='p value',main=paste('Distribution of p values in \n',samplelabel))

# plotrandvalues(pvec,targetgenelist,xlab='Genes',ylab='p value',main=paste('Distribution of p values in \n',samplelabel))



# you need to write after this code:
# dev.off()




@
%%
\clearpage
\newpage
The following figures show the distribution of sgRNA read counts (normalized) of selected genes in selected samples.
%


<<fig=TRUE,echo=FALSE,width=4.5,height=4.5>>=
par(mfrow=c(2,2));

# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(760.1879919988596,881.6673649421962,630.2490580386057,623.023254695768),c(1034.463060273105,987.2949954609434,745.9469527510067,590.0795678222747),c(938.6091436789915,1008.8516547504836,945.8810339645419,997.0309939066021),c(806.6913772771919,1045.497975542702,600.8171374538721,635.6193702650447),c(624.4740308804614,618.6761216098051,326.7958078718696,328.46793676806425))
targetgene="CD52"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(1095.2021757386817,1158.6704368127882,615.0256508396055,736.3882948192592),c(929.1186568874951,935.5590131660467,693.1724744611396,614.302866993961),c(784.8632576567502,836.3983804341616,776.393767149007,672.4387850060077),c(1005.9915998986157,1017.4743184662997,789.5873867214738,812.9339202017874),c(930.0677055666448,1078.9107974414894,709.4107754734064,710.227131713838))
targetgene="FCER1G"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(895.9019531172578,881.6673649421962,673.8894920090728,651.1222817349238),c(936.7110463206923,1016.3964855018227,696.2171559009396,794.5242128313059),c(706.0922172873303,724.3037521285523,684.0384301417395,761.5805259578127),c(844.6533244431774,819.1530530025294,689.1128992080729,667.5941251716704),c(742.1560670950165,740.4712465957075,326.7958078718696,401.13783428312274))
targetgene="TREM1"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(795.3027931273963,987.2949954609434,835.2576083184742,641.4329620662494),c(981.3163342407252,1017.4743184662997,744.9320589377401,675.34558090661),c(1022.1254274441596,840.7097122920696,737.8278022448733,966.0251709668439),c(1083.813591588886,911.8466879475525,617.0554384661389,639.4950981325145),c(706.0922172873303,645.6219457217304,684.0384301417395,788.7106210301013))
targetgene="P2RY12"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



par(mfrow=c(1,1));
@
%


<<fig=TRUE,echo=FALSE,width=4.5,height=4.5>>=
par(mfrow=c(2,2));

# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(662.435978046447,708.1362576613972,480.04477367513766,513.5339424397465),c(625.4230795596111,552.9283107767073,620.100119905939,739.2950907198615),c(645.3531018217535,719.9924202706443,497.2979685006712,453.46016049396485),c(857.9400059512724,832.0870485762536,665.7703415029393,774.1766415270895),c(1074.3231047973898,898.9126923738283,822.0639887460075,896.2620693523877))
targetgene="CD44"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(983.2144315990245,782.506732210311,833.2278206919409,841.0329472409433),c(660.5378806881478,821.3087189314834,705.3512002203397,842.0018792078107),c(636.8116637094067,670.4121039047017,718.5448197928065,768.3630497258848),c(852.2457138763745,1003.4624899280985,594.7277745742721,515.4718063734814),c(605.4930572974688,602.50862714265,698.2469435274729,689.8795604096217))
targetgene="VLDLR"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(775.3727708652539,792.2072288906041,693.1724744611396,708.2892677801032),c(700.3979252124325,726.4594180575064,627.2043765988057,585.2349079879375),c(839.9080810474292,1012.0851536439146,759.1405723234735,697.6310161445613),c(788.6594523733488,606.819959000558,387.68943666787015,479.62132359938585),c(928.1696082083455,788.9737299971731,744.9320589377401,771.2698456264872))
targetgene="CD300A"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(788.6594523733488,601.430794178173,731.7384393652733,612.365003060226),c(651.0473938966513,904.3018571962134,646.4873590508726,682.1281046746822),c(894.0038557589586,895.6791934803973,710.425669286673,697.6310161445613),c(742.1560670950165,988.3728284254204,706.3660940336064,645.3086899337192),c(702.2960225707318,799.7520596419432,518.6107385792714,683.0970366415496))
targetgene="TNFRSF1A"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



par(mfrow=c(1,1));
@
%


<<fig=TRUE,echo=FALSE,width=4.5,height=4.5>>=
par(mfrow=c(2,2));

# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(675.7226595545419,702.7470928390121,703.3214125938064,613.3339350270935),c(726.0222395494727,713.5254224837822,722.6043950458732,755.766934156608),c(759.2389433197101,600.352961213696,533.8341457782715,537.7572416114326),c(866.481444063619,918.3136857344145,757.1107846969402,678.2523768072124),c(862.6852493470205,1031.486147004501,615.0256508396055,571.6698604517933))
targetgene="ADAM10"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(744.0541644533158,819.1530530025294,763.2001475765402,585.2349079879375),c(924.373413491747,968.9718350648342,877.8831484756746,831.3436275722688),c(758.2898946405604,708.1362576613972,826.1235639990741,757.7047980903429),c(745.0032131324655,724.3037521285523,439.44902114447063,530.0057858764931),c(721.2769961537246,779.2732333168799,721.5895012326065,871.0698382138341))
targetgene="IL21R"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



par(mfrow=c(1,1));
@

\newpage\section{Comparison results of 1,3 vs 0,2 pos.}

The following figure shows the distribution of RRA score in the comparison 1,3 vs 0,2 pos., and the RRA scores of 10 genes.

<<echo=FALSE>>=
gstable=read.table('TREM2_CRISPRa.gene_summary.txt',header=T)
@
%


<<fig=TRUE,echo=FALSE,width=4.5,height=4.5>>=# 
#
# parameters
# Do not modify the variables beginning with "__"

# gstablename='__GENE_SUMMARY_FILE__'
startindex=9
# outputfile='__OUTPUT_FILE__'
targetgenelist=c("TREM2","MS4A4A","LDLR","PTPRC","TGFBR3","ABCA1","ITGAX","AXL","P2RY6","CD81")
# samplelabel=sub('.\w+.\w+$','',colnames(gstable)[startindex]);
samplelabel='1,3_vs_0,2 pos.'


# You need to write some codes in front of this code:
# gstable=read.table(gstablename,header=T)
# pdf(file=outputfile,width=6,height=6)


# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")

######
# function definition

plotrankedvalues<-function(val, tglist, ...){
  
  plot(val,log='y',ylim=c(max(val),min(val)),type='l',lwd=2, ...)
  if(length(tglist)>0){
    for(i in 1:length(tglist)){
      targetgene=tglist[i];
      tx=which(names(val)==targetgene);ty=val[targetgene];
      points(tx,ty,col=colors[(i %% length(colors)) ],cex=2,pch=20)
      # text(tx+50,ty,targetgene,col=colors[i])
    }
    legend('topright',tglist,pch=20,pt.cex = 2,cex=1,col=colors)
  }
}



plotrandvalues<-function(val,targetgenelist, ...){
  # choose the one with the best distance distribution
  
  mindiffvalue=0;
  randval=val;
  for(i in 1:20){
    randval0=sample(val)
    vindex=sort(which(names(randval0) %in% targetgenelist))
    if(max(vindex)>0.9*length(val)){
      # print('pass...')
      next;
    }
    mindiffind=min(diff(vindex));
    if (mindiffind > mindiffvalue){
      mindiffvalue=mindiffind;
      randval=randval0;
      # print(paste('Diff: ',mindiffvalue))
    }
  }
  plot(randval,log='y',ylim=c(max(randval),min(randval)),pch=20,col='grey', ...)
  
  if(length(targetgenelist)>0){
    for(i in 1:length(targetgenelist)){
      targetgene=targetgenelist[i];
      tx=which(names(randval)==targetgene);ty=randval[targetgene];
      points(tx,ty,col=colors[(i %% length(colors)) ],cex=2,pch=20)
      text(tx+50,ty,targetgene,col=colors[i])
    }
  }
  
}




# set.seed(1235)



pvec=gstable[,startindex]
names(pvec)=gstable[,'id']
pvec=sort(pvec);

plotrankedvalues(pvec,targetgenelist,xlab='Genes',ylab='RRA score',main=paste('Distribution of RRA scores in \n',samplelabel))

# plotrandvalues(pvec,targetgenelist,xlab='Genes',ylab='RRA score',main=paste('Distribution of RRA scores in \n',samplelabel))


pvec=gstable[,startindex+1]
names(pvec)=gstable[,'id']
pvec=sort(pvec);

plotrankedvalues(pvec,targetgenelist,xlab='Genes',ylab='p value',main=paste('Distribution of p values in \n',samplelabel))

# plotrandvalues(pvec,targetgenelist,xlab='Genes',ylab='p value',main=paste('Distribution of p values in \n',samplelabel))



# you need to write after this code:
# dev.off()




@
%%
\clearpage
\newpage
The following figures show the distribution of sgRNA read counts (normalized) of selected genes in selected samples.
%


<<fig=TRUE,echo=FALSE,width=4.5,height=4.5>>=
par(mfrow=c(2,2));

# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(703.2450712498814,739.3934136312305,1526.4002951530804,1397.1998962228574),c(452.6962199543771,416.0435242881268,2515.9217630880894,2120.9920754728396),c(641.556907105155,606.819959000558,1685.7386238359486,1247.9843733252708),c(486.86197240376407,503.3479944107648,2123.157857353886,1810.933846075257),c(604.5440086183191,633.7657831124833,2970.59419143156,2306.058081144522))
targetgene="TREM2"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(718.4298501162756,643.4662797927764,1461.4470911040132,1532.8503715842999),c(875.9719308551155,665.0229390823166,1148.859796617877,1162.7183602409355),c(648.2002478592025,629.4544512545752,1542.6385961653473,1436.9261068644228),c(453.6452686335267,600.352961213696,512.5213756996712,570.7009284849258),c(558.9896720191365,630.5322842190523,1036.206583345276,849.7533349427504))
targetgene="MS4A4A"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(694.7036331375347,825.6200507893915,1182.3512924556774,1000.9067217740719),c(740.2579697367173,893.5235275514433,739.8575898714067,837.1572193734735),c(602.6459112600198,833.1648815407306,740.8724836846734,810.9960562680525),c(577.9706456021293,535.6829833450752,891.0767680481414,1018.3474971776859),c(617.8306901264141,688.7352643008109,1027.072539025876,817.7785800361246))
targetgene="LDLR"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(636.8116637094067,584.1854667465407,1149.8746904311438,906.9203209879297),c(781.0670629401517,794.3628948195582,1029.1023266524094,968.9319668674462),c(835.162837651681,869.8112023329489,1089.9959554484099,1093.9241905933468),c(517.2315301365525,589.5746315689257,1543.6534899786138,1517.3474601144208),c(845.6023731223271,758.7944069918167,1204.6789563475443,930.1746881927484))
targetgene="PTPRC"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



par(mfrow=c(1,1));
@
%


<<fig=TRUE,echo=FALSE,width=4.5,height=4.5>>=
par(mfrow=c(2,2));

# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(826.6213995393343,759.8722399562937,844.3916526378742,853.6290628102201),c(475.4733882539684,611.1312908584661,848.451227890941,839.0950833072084),c(578.9196942812789,704.9027587679661,717.5299259795398,775.1455734939569),c(781.0670629401517,737.2377477022765,901.2257061808082,748.0154784216685),c(466.93195014162166,485.0248340146556,911.3746443134748,728.6368390843195))
targetgene="TGFBR3"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(539.0596497569941,485.0248340146556,1265.5725851435448,873.9766341144365),c(926.2715108500462,776.0397344234489,1033.161901905476,955.3669193313019),c(633.9645176719579,530.2938185226901,767.259722829607,680.1902407409473),c(846.5514218014766,641.3106138638224,857.585272210341,858.4737226445574),c(729.8184342660712,842.8653782210237,1135.6661770454102,818.747512002992))
targetgene="ABCA1"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(828.5194968976335,861.1885386171328,871.7937855960745,805.1824644668478),c(678.5698055919909,816.9973870735754,783.4980238418738,732.5125669517894),c(676.6717082336916,813.7638881801444,791.6171743480071,636.5883022319122),c(653.8945399341003,622.9874534677132,841.3469711980742,688.9106284427543),c(539.0596497569941,582.0298008175866,1189.4555491485442,736.3882948192592))
targetgene="ITGAX"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(823.7742535018854,815.9195541090984,1120.44276984641,1058.0737078192512),c(706.0922172873303,673.6456027981327,682.0086425152061,692.786356310224),c(761.1370406780093,975.4388328516962,808.8703691735407,1024.1610889788906),c(830.4175942559328,904.3018571962134,1340.6747273252788,1514.4406642138183),c(1090.4569323429334,936.6368461305237,1033.161901905476,927.267892292146))
targetgene="AXL"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



par(mfrow=c(1,1));
@
%


<<fig=TRUE,echo=FALSE,width=4.5,height=4.5>>=
par(mfrow=c(2,2));

# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(971.8258474492288,1079.9886304059664,933.7023082053418,912.7339127891344),c(588.4101810727752,743.7047454891385,1131.6066017923436,1047.4154561837092),c(735.512726340969,840.7097122920696,782.4831300286071,941.8018717951577),c(780.118014261002,731.8485828798914,636.3384209182058,830.3746956054014),c(950.9467765079368,971.1275009937882,813.944838239874,836.188287406606))
targetgene="P2RY6"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(766.8313327529071,786.8180640682191,981.4023174288756,909.827116888532),c(591.2573271102242,640.2327808993454,823.0788825592741,1078.4212791234677),c(852.2457138763745,822.3865518959605,899.1959185542747,925.3300283584111),c(1034.463060273105,970.0496680293112,1059.5491410504096,1144.308652870454),c(715.5827040788267,639.1549479348683,908.3299628736748,853.6290628102201))
targetgene="CD81"
collabel=c("TRE-VPH-7d-dox-rd1-trem2-low_S18_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-low_S20_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd2-trem2-high_S21_L001_R1_001-clipped-trimmed-aligned-counts","TRE-VPH-7d-dox-rd1-trem2-high_S19_L001_R1_001-clipped-trimmed-aligned-counts")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



par(mfrow=c(1,1));
@
%__INDIVIDUAL_PAGE__









\end{document}

